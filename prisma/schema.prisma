// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum StatusUsuario {
  active
  inactive
  deleted
}

enum TipoCategoria {
  receita
  despesa
}

enum TipoTransacao {
  receita
  despesa
}

enum TipoRelatorio {
  geral
  receitas
  despesas
  por_categoria
}

enum FiltroTipoRelatorio {
  receita
  despesa
  ambos
}

enum FormatoRelatorio {
  pdf
  png
  jpg
}

enum TipoCaixa {
  pessoal
  negocio
}

enum TipoMeta {
  reserva_financeira
  controle_inventario
  meta_vendas
  pagamento_contas
  outro
}

enum TipoEntrada {
  texto
  audio
  foto
  video
  nota_fiscal
}

model Grupo {
  id           Int        @id @default(autoincrement())
  nome         String     @db.VarChar(100)
  descricao    String?    @db.Text
  ativo        Boolean    @default(true)
  criado_em    DateTime   @default(now())
  atualizado_em DateTime  @updatedAt
  deletado_em  DateTime?

  usuarios     Usuario[]

  @@map("grupos")
}

model Usuario {
  id                  Int                 @id @default(autoincrement())
  chat_id             Int                 @unique
  agent_id            Int
  nome                String?             @db.VarChar(100)
  telefone            String?             @db.VarChar(20)
  grupo_id            Int?
  status              StatusUsuario       @default(active)
  criado_em           DateTime            @default(now())
  deletado_em         DateTime?

  grupo               Grupo?              @relation(fields: [grupo_id], references: [id])
  transacoes          Transacao[]
  relatorios          Relatorio[]
  metas               Meta[]
  questionarios       Questionario[]

  @@index([grupo_id])
  @@index([telefone])
  @@index([agent_id])
  @@map("usuarios")
}

model Categoria {
  id           Int              @id @default(autoincrement())
  nome         String           @db.VarChar(50)
  tipo         TipoCategoria
  ativo        Boolean          @default(true)
  criado_em    DateTime         @default(now())
  deletado_em  DateTime?

  transacoes   Transacao[]

  @@index([tipo])
  @@map("categorias")
}

model Transacao {
  id                Int              @id @default(autoincrement())
  usuario_id        Int
  tipo              TipoTransacao
  tipo_caixa        TipoCaixa        @default(pessoal)
  valor             Decimal          @db.Decimal(10, 2)
  categoria_id      Int
  descricao         String?          @db.Text
  tipo_entrada      TipoEntrada      @default(texto)
  arquivo_url       String?          @db.VarChar(500)
  data_transacao    DateTime         @db.Date
  criado_em         DateTime         @default(now())
  atualizado_em     DateTime         @updatedAt
  deletado_em       DateTime?

  usuario           Usuario          @relation(fields: [usuario_id], references: [id])
  categoria         Categoria        @relation(fields: [categoria_id], references: [id])

  @@index([data_transacao])
  @@index([usuario_id, data_transacao])
  @@index([tipo_caixa])
  @@map("transacoes")
}

model Relatorio {
  id                    Int                    @id @default(autoincrement())
  usuario_id            Int
  tipo_relatorio        TipoRelatorio
  data_inicio           DateTime               @db.Date
  data_fim              DateTime               @db.Date
  filtro_tipo           FiltroTipoRelatorio
  filtro_categoria_id   Int?
  url_imagem            String?                @db.VarChar(255)
  formato               FormatoRelatorio
  criado_em             DateTime               @default(now())

  usuario               Usuario                @relation(fields: [usuario_id], references: [id])

  @@map("relatorios")
}

model Meta {
  id                Int       @id @default(autoincrement())
  usuario_id        Int
  descricao         String    @db.Text
  tipo_meta         TipoMeta
  data_inicio       DateTime  @db.Date
  data_fim          DateTime  @db.Date
  cumprida          Boolean?
  criado_em         DateTime  @default(now())
  respondido_em     DateTime?

  usuario           Usuario   @relation(fields: [usuario_id], references: [id])

  @@index([usuario_id, data_inicio])
  @@map("metas")
}

model Admin {
  id            Int       @id @default(autoincrement())
  nome          String    @db.VarChar(100)
  email         String    @unique @db.VarChar(255)
  senha_hash    String    @db.VarChar(255)
  criado_em     DateTime  @default(now())
  atualizado_em DateTime  @updatedAt

  @@map("admins")
}

model Questionario {
  id           Int      @id @default(autoincrement())
  usuario_id   Int

  resposta_1   String   @db.VarChar(255)
  resposta_2   String   @db.VarChar(255)
  resposta_3   String   @db.VarChar(255)
  resposta_4   String   @db.VarChar(255)
  resposta_5   String   @db.VarChar(255)
  resposta_6   String   @db.VarChar(255)
  resposta_7   String   @db.VarChar(255)
  resposta_8   String   @db.VarChar(255)
  resposta_9   String   @db.VarChar(255)
  resposta_10  String   @db.VarChar(255)
  resposta_11  String?  @db.Text
  resposta_12  String   @db.VarChar(255)

  criado_em    DateTime @default(now())
  atualizado_em DateTime @updatedAt

  usuario      Usuario  @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@index([usuario_id])
  @@index([criado_em])
  @@map("questionarios")
}
